# Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 15m

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-dirs:
    - protos
    - third_party
    - missions

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Include test files or not.
  # Default: true
  tests: true

# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  format: line-number
  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true
  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true
  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""
  # Sort results by: filepath, line and column.
  sort-results: true

# all available settings of specific linters
linters-settings:
  goimports:
    # A comma-separated list of prefixes, which, if set, checks import paths
    # with the given prefixes are grouped after 3rd-party packages.
    # Default: ""
    local-prefixes: ""

  # Settings for revive linter.
  revive:
    severity: warning
    confidence: 0.8

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    exclude-functions:
      - (github.com/go-kit/kit/log.Logger).Log
      - (io.Closer).Close
      - (net.Listener).Close
      - (net.Conn).Close
      - (net.PacketConn).Close

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true

    # Settings per analyzer.
    settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      printf:
        # Run `go tool vet help printf` to see available settings for `printf` analyzer.
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: true

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 200

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3

    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3

  depguard:
    # Kind of list is passed in.
    # Allowed values: allowlist|denylist
    # Default: denylist
    list-type: denylist

    # A list of packages for the list type specified.
    # Default: []
    packages:
      - github.com/go-kit
      - gopkg.in/DataDog/dd-trace-go.v1

    # Specify an error message to output when a denied package is used.
    # Default: []
    packages-with-error-message:
      - github.com/go-kit: 'go-kit package can only be used by the Kernel'
      - gopkg.in/DataDog/dd-trace-go.v1: 'DataDog package can only be used by the Kernel'

    # Specify rules by which the linter ignores certain files for consideration.
    ignore-file-rules:
      - "**/mBaaS/pkg/**/*.go"

    # Create additional guards that follow the same configuration pattern.
    # Results from all guards are aggregated together.
    additional-guards:
      - list-type: denylist
        packages:
          - github.com/brianvoe/gofakeit
        packages-with-error-message:
          - github.com/brianvoe/gofakeit: 'gofakeit package can only be used in testing code, CLI clients or the Kernel'
        ignore-file-rules:
          - "**/mBaaS/pkg/**/*.go"
          - "**/*_test.go"
          - "**/pkg/client/**/*.go"
      - list-type: denylist
        packages:
          - github.com/stretchr/testify
        packages-with-error-message:
          - github.com/stretchr/testify: 'testify package can only be used in testing code or by the Kernel'
        ignore-file-rules:
          - "**/*_test.go"
          - "**/mBaaS/pkg/**/*.go"
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US
    ignore-words:
      - mbaas

  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 120

    # Tab width in spaces.
    # Default: 1
    tab-width: 1

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unparam:
    # Inspect exported functions.
    #
    # Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    #
    # Default: false
    check-exported: false

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 30

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    enabled-checks:

    # Which checks should be disabled; can't be combined with 'enabled-checks'.
    # Default: []
    disabled-checks:

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # Default: []
    enabled-tags:
      - diagnostic
      - performance

    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      # Must be valid enabled check name.
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: true
      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        sizeThreshold: 300
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        sizeThreshold: 32


linters:
  disable-all: true
  enable:
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    - gofmt
    - goimports
    - revive
    - dupl
    - nlreturn
    - exportloopref
    - godot
    - noctx
    - prealloc
    - unconvert
    - wastedassign
    - whitespace
    - errname
    - errorlint
    - misspell
    - sqlclosecheck
    - gocritic
    - gocyclo
    - wsl
    - unused
    #- wrapcheck
    #- depguard

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  #   # List of regexps of issue texts to exclude, empty list by default.
  #   # But independently from this option we use default exclude patterns,
  #   # it can be disabled by `exclude-use-default: false`. To list all
  #   # excluded by default patterns execute `golangci-lint run --help`
  #   exclude:
  #     - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
     - path: _test\.go
       linters:
         - dupl
     - linters:
         - govet
       text: "copylocks:"

  exclude:
    - EXC0012
    - EXC0013
    - EXC0014
    - EXC0015
